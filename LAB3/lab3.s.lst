68K GAS  ./lab3.s 			page 1


   1               	init:
   2 0000 2E7C 0000 	        move.l #$7000,a7
   2      7000 
   3 0006 21FC 0000 	        move.l #$0,$3000
   3      0000 3000 
   4               	        
   5 000e 4EBA 00C8 	        jsr setuppia
   6 0012 4EBA 0110 	        jsr setuppwm
   7 0016 027C F8FF 	        and.w #$F8FF,SR
   8               	main_loop:
   9               	        ; stop #$2000
  10 001a 4EBA 0128 	        jsr pwm
  11 001e 60FA      	        bra main_loop
  12               	
  13               	#########################################################
  14               	#   function    bcd,                                    #
  15               	#   desc.       decimal counter                         #
  16               	#       inarg:  none                                    #
  17               	#       outarg: none                                    #
  18               	#########################################################
  19               	bcd:
  20 0020 4A39 0001 	        tst.b $10082                    ; acknowledge lvl5 interrupt
  20      0082 
  21 0026 48E7 FFFE 	        movem.l a0-a6/d0-d7,-(a7)       ; Push registers to stack
  22               	
  23 002a 227C 0000 	        move.l #$3000,a1                ; Pointer to time memory
  23      3000 
  24 0030 123C 0000 	        move.b #$0,d1                   ; Reset counter
  25 0034 163C 0001 	        move.b #$1,d3
  26               	bcd_loop:
  27 0038 1411      	        move.b (a1),d2                  ; Fetch time to d2
  28 003a D403      	        add.b d3,d2                     ; Increase time by one
  29 003c 4EBA 001A 	        jsr bcd_carry                   ; Check if carry
  30 0040 12C2      	        move.b d2,(a1)+                 ; Save time to and increase pointer
  31               	
  32 0042 5201      	        add.b #1,d1
  33 0044 0C01 0004 	        cmp.b #4,d1                     ; Repeat 4 times
  34 0048 66EE      	        bne bcd_loop
  35               	bcd_done:
  36 004a 21FC 0000 	        move.l #$FFFF,$4010
  36      FFFF 4010 
  37 0052 4CDF 7FFF 	        movem.l (a7)+,a0-a6/d0-d7       ; Pop registers from stack
  38 0056 4E73      	        rte
  39               	#################    ############    ####################
  40               	
  41               	
  42               	#########################################################
  43               	#   function    bcd_carry,                              #
  44               	#   desc.       checks if decimalbase is overflowing    #
  45               	#       inarg:  number to check in d2                   #
  46               	#       outarg: carry in d3                             #
  47               	#########################################################
  48               	bcd_carry:
  49 0058 163C 0000 	        move.b #$0,d3                   ; Reset carry flag
  50               	        
  51 005c 1801      	        move.b d1,d4
  52 005e 0204 0001 	        and.b #$1,d4
68K GAS  ./lab3.s 			page 2


  53 0062 670E      	        beq.b carry_up_to_9
  54               	
  55 0064 0C02 0006 	        cmp.b #$6,d2                    ; Check if carry
  56 0068 6616      	        bne no_carry
  57 006a 143C 0000 	        move.b #$0,d2                   ; Set d2 to 0 if carry
  58 006e 163C 0001 	        move.b #$1,d3                   ; Set carry flag
  59               	
  60               	carry_up_to_9:
  61 0072 0C02 000A 	        cmp.b #$A,d2                    ; Check if carry
  62 0076 6608      	        bne no_carry
  63               	        
  64 0078 143C 0000 	        move.b #$0,d2                   ; Set d2 to 0 if carry
  65 007c 163C 0001 	        move.b #$1,d3                   ; Set carry flag
  66               	no_carry:
  67 0080 4E75      	        rts
  68               	#################    ############    ####################
  69               	
  70               	
  71               	#########################################################
  72               	#   function     seg_mux                                #
  73               	#   desc. muxing through the 7-seg led                  #
  74               	#       inarg:  none                                    #
  75               	#       outarg: none                                    #
  76               	#########################################################
  77               	seg_mux:
  78 0082 48E7 FFFE 	        movem.l a0-a6/d0-d7,-(a7)       ; Push registers to stack
  79 0086 4A39 0001 	        tst.b $10080                    ; acknowledge lvl5 interrupt
  79      0080 
  80 008c 227C 0000 	        move.l #$3010,a1                ; Pointer active 7seg to memory
  80      3010 
  81 0092 1211      	        move.b (a1),d1                  ; Fetch which segment is active
  82               	
  83 0094 0281 0000 	        and.l #$3,d1
  83      0003 
  84 009a 4EBA 002E 	        jsr fetch_num                   ; Fetch number to be shown
  85               	
  86 009e 0283 0000 	        and.l #$F,d3
  86      000F 
  87 00a4 41FA 0074 	        lea seg_mem,a0                  ; Tabellstart till A0
  88 00a8 D1C3      	        add.l d3,a0
  89 00aa 1010      	        move.b (a0),d0
  90               	
  91 00ac 13FC 0000 	        move.b #0,$10080                ; turn light off
  91      0001 0080 
  92 00b4 13C1 0001 	        move.b d1,$10082                ; set PIAB 
  92      0082 
  93 00ba 13C0 0001 	        move.b d0,$10080                ; set PIAA
  93      0080 
  94               	
  95 00c0 5201      	        add.b #$1,d1                    ; Change state (00 -> 01 -> 10 -> 11)
  96 00c2 1281      	        move.b d1,(a1)                  ; Save new active segment
  97               	         
  98               	        ; jsr update_duty
  99               	 
 100 00c4 4CDF 7FFF 	        movem.l (a7)+,a0-a6/d0-d7       ; Pop registers from stack
 101 00c8 4E73      	        rte
 102               	#################    ############    ####################
68K GAS  ./lab3.s 			page 3


 103               	
 104               	
 105               	#########################################################
 106               	#   function     seg_mux                                #
 107               	#   desc. muxing through the 7-seg led                  #
 108               	#       inarg:  none                                    #
 109               	#       outarg: number from memory in d3                #
 110               	#########################################################
 111               	fetch_num:
 112 00ca 243C 0000 	        move.l #$3000,d2
 112      3000 
 113 00d0 D401      	        add.b d1,d2
 114 00d2 2442      	        move.l d2,a2                    ; Pointer to memory which shall be returned
 115 00d4 1612      	        move.b (a2),d3
 116 00d6 4E75      	        rts        
 117               	#################    ############    ####################
 118               	
 119               	#########################################################
 120               	#   function     setuppia                               #
 121               	#   desc. muxing                                        #
 122               	#       inarg:  none                                    #
 123               	#       outarg: none                                    #
 124               	#########################################################
 125               	setuppia:
 126 00d8 13FC 0000 	        move.b #$00,$10084        ; Valj datariktningsregistret (DDRA)
 126      0001 0084 
 127 00e0 13FC 00FF 	        move.b #$FF,$10080        ; Satt alla pinnar pa PIAA som utgang
 127      0001 0080 
 128 00e8 13FC 0007 	        move.b #$07,$10084        ; Valj in/utgangsregistret och satt interrupt CRA_7
 128      0001 0084 
 129 00f0 13FC 0000 	        move.b #$00,$10086        ; Valj datariktningsregistret (DDRB)
 129      0001 0086 
 130 00f8 13FC 00FF 	        move.b #$FF,$10082        ; Satt alla pinnar pa PIAB som utgang 
 130      0001 0082 
 131 0100 13FC 0007 	        move.b #$07,$10086        ; Valj in/utgangsregistret och satt interrupt CRB_7
 131      0001 0086 
 132               	        
 133 0108 21FC 0000 	        move.l #bcd,$68
 133      0000 0068 
 134 0110 21FC 0000 	        move.l #seg_mux,$74
 134      0000 0074 
 135 0118 4E75      	        rts
 136               	#################    ############    ####################
 137               	
 138               	seg_mem:
 139 011a FC        	        dc.b $FC; 7seg 0 
 140 011b 60        	        dc.b $60; 7seg 1 
 141 011c DA        	        dc.b $DA; 7seg 2 
 142 011d F2        	        dc.b $F2; 7seg 3 
 143 011e 66        	        dc.b $66; 7seg 4 
 144 011f B6        	        dc.b $B6; 7seg 5 
 145 0120 BE        	        dc.b $BE; 7seg 6 
 146 0121 E0        	        dc.b $E0; 7seg 7 
 147 0122 FE        	        dc.b $FE; 7seg 8 
 148 0123 F6        	        dc.b $F6; 7seg 9
 149               	
 150               	 
68K GAS  ./lab3.s 			page 4


 151               	#########################################################
 152               	#   function     setuppwm                               #
 153               	#   desc. setting up pwm                                #
 154               	#       inarg:  none                                    #
 155               	#       outarg: none                                    #
 156               	#########################################################
 157               	setuppwm:
 158 0124 11FC 00FF 	        move.b #$FF,$4000
 158      4000 
 159 012a 11FC 00AA 	        move.b #$AA,$4001
 159      4001 
 160 0130 11FC 0066 	        move.b #$66,$4002
 160      4002 
 161 0136 11FC 0000 	        move.b #$00,$4003
 161      4003 
 162               	
 163 013c 11FC 0000 	        move.b #$0,4010
 163      0FAA 
 164 0142 4E75      	        rts
 165               	#################    ############    ####################
 166               	
 167               	#########################################################
 168               	#   function     pwm                                    #
 169               	#   desc. pwming all numbers                            #
 170               	#       inarg:  none                                    #
 171               	#       outarg: none                                    #
 172               	#########################################################
 173               	pwm:
 174               	counter:
 175 0144 1038 4010 	        move.b $4010,d0
 176 0148 5200      	        add.b #1,d0
 177 014a 0C00 00FF 	        cmp.b #$FF,d0
 178 014e 6604      	        bne no_pwm_reset
 179 0150 103C 0000 	        move.b #0,d0
 180               	no_pwm_reset: 
 181 0154 11C0 4010 	        move.b d0,$4010
 182               	
 183               	pwm_control:
 184 0158 1238 3010 	        move.b $3010,d1                ; Active 7seg
 185 015c 0201 0003 	        and.b #$03,d1
 186 0160 243C 0000 	        move.l #$4000,d2
 186      4000 
 187 0166 D401      	        add.b d1,d2
 188 0168 2042      	        move.l d2,a0
 189 016a 1610      	        move.b (a0),d3
 190 016c B043      	        cmp d3,d0
 191 016e 6702      	        beq turn_7seg_off
 192 0170 4E75      	        rts
 193               	turn_7seg_off:
 194 0172 13FC 0000 	        move.b #0,$10080                ; turn light off
 194      0001 0080 
 195 017a 4E75      	        rts
 196               	#################    ############    ####################
 197               	
 198               	#########################################################
 199               	#   function     new_pwm                                #
 200               	#   desc. init new pwm loop                             #
68K GAS  ./lab3.s 			page 5


 201               	#       inarg:  none                                    #
 202               	#       outarg: none                                    #
 203               	#########################################################
 204               	new_pwm:
 205 017c 4E75      	        rts
 206               	#################    ############    ####################
 207               	
 208               	#########################################################
 209               	#   function     new_duty                               #
 210               	#   desc. init new pwm loop                             #
 211               	#       inarg:  none                                    #
 212               	#       outarg: none                                    #
 213               	#########################################################
 214               	update_duty:
 215 017e 103C 0001 	        move.b #1,d0
 216               	next_num
 217 0182 1238 4004 	        move.b $4004,d1
 218               	        
 219 0186 C200      	        and.b d0,d1
 220               	
 221 0188 0C00 0000 	        cmp.b #0,d0
 222 018c E308      	        lsl.b #1,d0
 223 018e 66F2      	        bne next_num 
 224 0190 4E75      	        rts
 225               	#################    ############    ####################
